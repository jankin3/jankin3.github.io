<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>王juju</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-09T16:14:33.391Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jankin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql-lock</title>
    <link href="http://yoursite.com/2019/12/09/mysql-lock/"/>
    <id>http://yoursite.com/2019/12/09/mysql-lock/</id>
    <published>2019-12-09T15:58:44.000Z</published>
    <updated>2019-12-09T16:14:33.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql-锁机制"><a href="#mysql-锁机制" class="headerlink" title="mysql 锁机制"></a>mysql 锁机制</h1><p><a href="https://learnku.com/articles/28772#c812c1" target="_blank" rel="noopener">https://learnku.com/articles/28772#c812c1</a> 锁机制</p><h2 id="作用：解决并发访问"><a href="#作用：解决并发访问" class="headerlink" title="作用：解决并发访问"></a>作用：解决并发访问</h2><h2 id="所处的处置：一般-表锁在mysql-server层，行锁在索引层"><a href="#所处的处置：一般-表锁在mysql-server层，行锁在索引层" class="headerlink" title="所处的处置：一般,表锁在mysql server层，行锁在索引层"></a>所处的处置：一般,表锁在mysql server层，行锁在索引层</h2><h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><h3 id="锁粒度"><a href="#锁粒度" class="headerlink" title="锁粒度"></a>锁粒度</h3><ul><li><p>表锁</p></li><li><p>行锁</p><ul><li>实现方式：索引加锁</li></ul></li><li><p>页锁</p></li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ul><li><p>写锁</p><ul><li>for update. 比读锁有更高的优先级</li></ul></li><li><p>读锁</p><ul><li>lock in share mode, 普通select innodb不会有任何锁</li></ul></li></ul><h3 id="锁模式"><a href="#锁模式" class="headerlink" title="锁模式"></a>锁模式</h3><ul><li><p>记录锁</p></li><li><p>间隙锁</p></li><li><p>next-key锁</p></li><li><p>意向锁</p><ul><li>是一个标记锁，为了实现表锁和行锁不同的锁粒度</li></ul></li><li><p>插入意向锁</p></li></ul><p><em>XMind: ZEN - Trial Version</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql-锁机制&quot;&gt;&lt;a href=&quot;#mysql-锁机制&quot; class=&quot;headerlink&quot; title=&quot;mysql 锁机制&quot;&gt;&lt;/a&gt;mysql 锁机制&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://learnku.com/articles/2877
      
    
    </summary>
    
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="lock" scheme="http://yoursite.com/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>string-decode</title>
    <link href="http://yoursite.com/2019/12/09/string-decode/"/>
    <id>http://yoursite.com/2019/12/09/string-decode/</id>
    <published>2019-12-09T15:13:12.000Z</published>
    <updated>2019-12-09T15:13:54.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h1><p>发展与概述文章<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a></p><h2 id="意义-使机器认识不同的字符串"><a href="#意义-使机器认识不同的字符串" class="headerlink" title="意义:使机器认识不同的字符串"></a>意义:使机器认识不同的字符串</h2><h2 id="编码分类与发展"><a href="#编码分类与发展" class="headerlink" title="编码分类与发展"></a>编码分类与发展</h2><p>ps:utf-8是Unicode的一种实现方式,从计算机工作方式来说一般在utf-8是用来存储和传输，unicode 一般用来转换</p><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><ul><li>英语字符和二进制位对应</li></ul><h3 id="unicode"><a href="#unicode" class="headerlink" title="unicode"></a>unicode</h3><ul><li>所有的字符对应二进制位</li></ul><h3 id="utf-8"><a href="#utf-8" class="headerlink" title="utf-8"></a>utf-8</h3><ul><li>以变长方式实现了unicode编码</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="python2-编码问题"><a href="#python2-编码问题" class="headerlink" title="python2 编码问题"></a>python2 编码问题</h3><p>细节请看：<a href="https://www.jianshu.com/p/58d5f64813dc" target="_blank" rel="noopener">https://www.jianshu.com/p/58d5f64813dc</a></p><ul><li><p>type:str与unicode</p><ul><li>str 是Unicode经过编码的字节</li><li>真正的字符串</li></ul></li><li><p>编码解码错误</p><ul><li>python 会隐式地进行编码、解码，默认采用 ascii</li></ul></li><li><p>类型转换</p><ul><li>2种类型的字符串都提供了 encode 和 decode 方法，通过类型转换解决问题</li></ul></li></ul><p><em>XMind: ZEN - Trial Version</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串编码&quot;&gt;&lt;a href=&quot;#字符串编码&quot; class=&quot;headerlink&quot; title=&quot;字符串编码&quot;&gt;&lt;/a&gt;字符串编码&lt;/h1&gt;&lt;p&gt;发展与概述文章&lt;a href=&quot;http://www.ruanyifeng.com/blog/2007/10/asc
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python-datetime</title>
    <link href="http://yoursite.com/2019/12/01/python-datetime/"/>
    <id>http://yoursite.com/2019/12/01/python-datetime/</id>
    <published>2019-12-01T14:46:31.000Z</published>
    <updated>2019-12-01T15:03:25.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-时间和日期"><a href="#python-时间和日期" class="headerlink" title="python 时间和日期"></a>python 时间和日期</h1><h2 id="时间字符串格式化"><a href="#时间字符串格式化" class="headerlink" title="时间字符串格式化"></a>时间字符串格式化</h2><p><a href="https://docs.python.org/zh-cn/3/library/datetime.html#strftime-strptime-behavior" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/datetime.html#strftime-strptime-behavior</a></p><h3 id="时间元组转换成字符串-strptime"><a href="#时间元组转换成字符串-strptime" class="headerlink" title="时间元组转换成字符串: strptime(),"></a>时间元组转换成字符串: strptime(),</h3><h3 id="字符串转换成时间元组-strftime"><a href="#字符串转换成时间元组-strftime" class="headerlink" title="字符串转换成时间元组:strftime(),"></a>字符串转换成时间元组:strftime(),</h3><h2 id="时间换算"><a href="#时间换算" class="headerlink" title="时间换算"></a>时间换算</h2><h3 id="主要是datetime-timedelta"><a href="#主要是datetime-timedelta" class="headerlink" title="主要是datetime.timedelta()"></a>主要是datetime.timedelta()</h3><h2 id="主要模块"><a href="#主要模块" class="headerlink" title="主要模块"></a>主要模块</h2><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h3><p><a href="https://docs.python.org/zh-cn/3/library/datetime.html" target="_blank" rel="noopener">https://docs.python.org/zh-cn/3/library/datetime.html</a></p><ul><li><p>有效类型</p><ul><li>date</li><li>time</li><li>datetime</li><li>timedelta</li><li>tzinfo</li><li>timezone</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-时间和日期&quot;&gt;&lt;a href=&quot;#python-时间和日期&quot; class=&quot;headerlink&quot; title=&quot;python 时间和日期&quot;&gt;&lt;/a&gt;python 时间和日期&lt;/h1&gt;&lt;h2 id=&quot;时间字符串格式化&quot;&gt;&lt;a href=&quot;#时间字符串
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux-file-permission</title>
    <link href="http://yoursite.com/2019/11/24/linux-file-permission/"/>
    <id>http://yoursite.com/2019/11/24/linux-file-permission/</id>
    <published>2019-11-24T15:56:57.000Z</published>
    <updated>2019-11-24T15:58:53.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-文件权限"><a href="#linux-文件权限" class="headerlink" title="linux 文件权限"></a>linux 文件权限</h1><h2 id="文件权限：每个文件可以针对每个用户具有不同的权限"><a href="#文件权限：每个文件可以针对每个用户具有不同的权限" class="headerlink" title="文件权限：每个文件可以针对每个用户具有不同的权限"></a>文件权限：每个文件可以针对每个用户具有不同的权限</h2><h2 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h2><h3 id="为什么要有这么细致的分级？"><a href="#为什么要有这么细致的分级？" class="headerlink" title="为什么要有这么细致的分级？"></a>为什么要有这么细致的分级？</h3><ul><li>安全防护，因为linux多用户，多任务的环境。每个用户的权限隐私很重要</li></ul><h3 id="文件用户身份"><a href="#文件用户身份" class="headerlink" title="文件用户身份"></a>文件用户身份</h3><ul><li>own/group/other</li></ul><h3 id="权限等级与意义"><a href="#权限等级与意义" class="headerlink" title="权限等级与意义"></a>权限等级与意义</h3><ul><li><p>read</p><ul><li>对文件: 读取文件</li><li>对目录:读取该目录结构</li></ul></li><li><p>write</p><ul><li>对文件: 包括编辑新增等，但是不包括删除, 那么怎么才能删除文件呢？</li><li>对目录:更改目录结构的，包括增删改，注意删除的权限在这里</li></ul></li><li><p>execute</p><ul><li>对文件:可执行</li><li>对目录:注意，代表用户是否可以进入该目录，区分与r权限</li></ul></li></ul><h2 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h2><h3 id="定义-一个文件拥有的属性"><a href="#定义-一个文件拥有的属性" class="headerlink" title="定义:一个文件拥有的属性"></a>定义:一个文件拥有的属性</h3><h3 id="内容包括-权限，连接，所有者，用户组，文件容量，修改日期，文件名"><a href="#内容包括-权限，连接，所有者，用户组，文件容量，修改日期，文件名" class="headerlink" title="内容包括:权限，连接，所有者，用户组，文件容量，修改日期，文件名"></a>内容包括:权限，连接，所有者，用户组，文件容量，修改日期，文件名</h3><h3 id="command-chgrp-chown-chmod"><a href="#command-chgrp-chown-chmod" class="headerlink" title="command:chgrp/chown/chmod"></a>command:chgrp/chown/chmod</h3><p><em>XMind: ZEN - Trial Version</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux-文件权限&quot;&gt;&lt;a href=&quot;#linux-文件权限&quot; class=&quot;headerlink&quot; title=&quot;linux 文件权限&quot;&gt;&lt;/a&gt;linux 文件权限&lt;/h1&gt;&lt;h2 id=&quot;文件权限：每个文件可以针对每个用户具有不同的权限&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>XMLHttpRequest 与 js</title>
    <link href="http://yoursite.com/2019/11/22/XMLHttpRequest/"/>
    <id>http://yoursite.com/2019/11/22/XMLHttpRequest/</id>
    <published>2019-11-21T16:53:02.000Z</published>
    <updated>2019-11-22T16:19:27.566Z</updated>
    
    <content type="html"><![CDATA[<h3 id="XMLHttpRequest是什么？"><a href="#XMLHttpRequest是什么？" class="headerlink" title="XMLHttpRequest是什么？"></a>XMLHttpRequest是什么？</h3><p>XMLHttpRequest是一个浏览器接口，使得Javascript可以进行HTTP(S)通信。<br>关联: 有了XMLHttpRequest对象。ajax操作因此得以诞生。所以在这里 ajax，是一种技术方案</p><h3 id="js-ajax发送请求"><a href="#js-ajax发送请求" class="headerlink" title="js ajax发送请求"></a>js ajax发送请求</h3><figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// get</span><br><span class="line">var httpRequest = new XMLHttpRequest();//第一步：建立所需的对象</span><br><span class="line">httpRequest.open(&apos;GET&apos;, &apos;url&apos;, true);//第二步：打开连接  将请求参数写在url中  ps:&quot;./Ptest.php?name=test&amp;nameone=testone&quot;</span><br><span class="line">httpRequest.send();//第三步：发送请求  将请求参数写在URL中</span><br><span class="line">httpRequest.onreadystatechange = function () &#123;</span><br><span class="line">    if (httpRequest.readyState == 4 &amp;&amp; httpRequest.status == 200) &#123;</span><br><span class="line">        var json = httpRequest.responseText;</span><br><span class="line">        console.log(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// post</span><br><span class="line">var httpRequest = new XMLHttpRequest();//第一步：创建需要的对象</span><br><span class="line">httpRequest.open(&apos;POST&apos;, &apos;url&apos;, true); //第二步：打开连接</span><br><span class="line">httpRequest.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);//设置请求头 注：post方式必须设置请求头（在建立连接后设置请求头）</span><br><span class="line">httpRequest.send(&apos;name=teswe&amp;ee=ef&apos;);//发送请求 将情头体写在send中</span><br><span class="line">httpRequest.onreadystatechange = function () &#123;//请求后的回调接口，可将请求成功后要执行的程序写在其中</span><br><span class="line">    if (httpRequest.readyState == 4 &amp;&amp; httpRequest.status == 200) &#123;//验证请求是否发送成功</span><br><span class="line">        var json = httpRequest.responseText;//获取到服务端返回的数据</span><br><span class="line">        console.log(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="js-发送非ajax请求"><a href="#js-发送非ajax请求" class="headerlink" title="js 发送非ajax请求"></a>js 发送非ajax请求</h3><p>get 请求就不必多说了。 <code>windows.location.href = &#39;url&#39;;</code><br>post, 我是模拟表单进行提交post请求</p><figure class="highlight plain"><figcaption><span>js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var temp = document.createElement(&quot;form&quot;);</span><br><span class="line">temp.action = &apos;%s&apos;;</span><br><span class="line">temp.method = &quot;post&quot;;</span><br><span class="line">temp.style.display = &quot;none&quot;;</span><br><span class="line">form_data = &#123;</span><br><span class="line">    &apos;action&apos;: &apos;applycoupon&apos;,</span><br><span class="line">    &apos;couponcode&apos;: &apos;%s&apos;,</span><br><span class="line">&#125;;</span><br><span class="line">for(var key in form_data)&#123;</span><br><span class="line">    var opt = document.createElement(&quot;textarea&quot;);</span><br><span class="line">    opt.name = key;</span><br><span class="line">    opt.value = form_data[key];</span><br><span class="line">    temp.appendChild(opt);</span><br><span class="line">&#125;</span><br><span class="line">document.body.appendChild(temp);</span><br><span class="line">temp.submit();</span><br></pre></td></tr></table></figure><p>这里主要理解XMLHttpRequest是什么，具体代码细节不细说了，请参考</p><blockquote><p><a href="https://segmentfault.com/a/1190000004322487#articleHeader18" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004322487#articleHeader18</a><br><a href="http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;XMLHttpRequest是什么？&quot;&gt;&lt;a href=&quot;#XMLHttpRequest是什么？&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest是什么？&quot;&gt;&lt;/a&gt;XMLHttpRequest是什么？&lt;/h3&gt;&lt;p&gt;XMLHtt
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>regular-expression-note</title>
    <link href="http://yoursite.com/2019/11/17/regular-expression-note/"/>
    <id>http://yoursite.com/2019/11/17/regular-expression-note/</id>
    <published>2019-11-17T15:30:14.000Z</published>
    <updated>2019-11-17T15:30:44.364Z</updated>
    
    <content type="html"><![CDATA[<h4 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h4><p>接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。最好还是拿例子来说明吧：</p><p>断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。<br>(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re dancing.时，它会匹配sing和danc。</p><p>(?&lt;=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</p><p>假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?&lt;=\d)\d{3})+\b，用它对1234567890进行查找时结果是234567890。</p><p>下面这个例子同时使用了这两种断言：(?&lt;=\s)\d+(?=\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请详细分析表达式(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)，这个表达式最能表现零宽断言的真正用途。</span><br><span class="line">一个更复杂的例子：(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)匹配不包含属性的简单HTML标签内里的内容。(?&lt;=&lt;(\w+)&gt;)指定了这样的前缀：被尖括号括起来的单词(比如可能是&lt;b&gt;)，然后是.*(任意的字符串),最后是一个后缀(?=&lt;\/\1&gt;)。注意后缀里的\/，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的(\w+)匹配的内容，这样如果前缀实际上是&lt;b&gt;的话，后缀就是&lt;/b&gt;了。整个表达式匹配的是&lt;b&gt;和&lt;/b&gt;之间的内容(再次提醒，不包括前缀和后缀本身)。</span><br></pre></td></tr></table></figure><h4 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词--它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：</span><br><span class="line">\b\w*q[^u]\w*\b匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w*\b将会匹配下一个单词，于是\b\w*q[^u]\w*\b就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题：\b\w*q(?!u)\w*\b。</span><br><span class="line"></span><br><span class="line">零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d&#123;3&#125;(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</span><br><span class="line"></span><br><span class="line">同理，我们可以用(?&lt;!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d&#123;7&#125;匹配前面不是小写字母的七位数字。</span><br></pre></td></tr></table></figure><h4 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。</span><br><span class="line"></span><br><span class="line">有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：</span><br><span class="line"></span><br><span class="line">a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。</span><br></pre></td></tr></table></figure><h4 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h4><p>使用小括号指定一个子表达式后，<code>匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理</code>。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p><p>呃……其实,组号分配还不像我刚说得那么简单：</p><p>分组0对应整个正则表达式<br>实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号<br>你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权．<br>后向引用用于重复搜索前面某个分组匹配的文本。例如，\1代表分组1匹配的文本。难以理解？请看示例：</p><p>\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。</p><p>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?<Word>\w+)(或者把尖括号换成’也行：(?’Word’\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k<Word>,所以上一个例子也可以写成这样：\b(?<Word>\w+)\b\s+\k<Word>\b。<br><img src="evernotecid://A7FC8235-39E4-4893-9D89-39960F38D08F/wwwevernotecom/187238225/ENResource/p138" alt="3b7159b45fc96abe1c22fd55c0f98929.png"><br>我们已经讨论了前两种语法。第三个(?:exp)不会改变正则表达式的处理方式，只是这样的组匹配的内容不会像前两种那样被捕获到某个组里面，也不会拥有组号。“我为什么会想要这样做？”——好问题，你觉得为什么呢？<br>(原文链接)[<a href="https://deerchao.net/tutorials/regex/regex.htm#negation" target="_blank" rel="noopener">原文链接</a>]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;零宽断言&quot;&gt;&lt;a href=&quot;#零宽断言&quot; class=&quot;headerlink&quot; title=&quot;零宽断言&quot;&gt;&lt;/a&gt;零宽断言&lt;/h4&gt;&lt;p&gt;接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>git note</title>
    <link href="http://yoursite.com/2019/11/17/git-note/"/>
    <id>http://yoursite.com/2019/11/17/git-note/</id>
    <published>2019-11-17T10:11:23.000Z</published>
    <updated>2019-11-17T10:18:06.252Z</updated>
    
    <content type="html"><![CDATA[<h4 id="本地多个-remote-配置（同步推送到线上服务器）"><a href="#本地多个-remote-配置（同步推送到线上服务器）" class="headerlink" title="本地多个 remote 配置（同步推送到线上服务器）"></a>本地多个 remote 配置（同步推送到线上服务器）</h4><ol><li>远程 git库初始化，并配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git config receive.denyCurrentBranch updateInstead</span><br></pre></td></tr></table></figure></li><li>本地添加远程地址<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add productionServer ssh://ubuntu@xxx.xxx.xxx.xxx/usr/share/nginx/git_dir</span><br></pre></td></tr></table></figure></li></ol><h4 id="Git-Config中receive-denyCurrentBranch做了什么"><a href="#Git-Config中receive-denyCurrentBranch做了什么" class="headerlink" title="Git Config中receive.denyCurrentBranch做了什么?"></a>Git Config中receive.denyCurrentBranch做了什么?</h4><p>这个config是决定 当你Push到一个非bare的远程库的正处于切换状态下分支时的行为。</p><p>设置为true或refuse时，会拒绝你的push并且发出几行警告消息<br>设置为warn时，会接受你的push并且发出几行警告消息<br>设置为false或ignore时会接受你的push且不发出警告</p><p>后两种虽然接受了push,但并没有直接反映在工作目录(working tree)上，你需要输入git reset –hard, 或者切换到其他分支再切换回来，才能刷新文件</p><p>设置为updateInstead时，会接受push并直接更新工作目录,但如果工作目录相对HEAD指针有更新，则会拒绝push</p><h4 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h4><p><code>git checkout -- file</code>，没有–，就变成了“切换到另一个分支”的命令<br>命令git checkout – readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：<br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。<br>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作</p><blockquote><p>总之，就是让这个文件回到最近一次git commit或git add时的状态</p></blockquote><p><code>git checkout --orphan &lt;new_branch&gt;</code><br>假如你的某个分支上，积累了无数次的提交，你也懒得去打理，打印出的log也让你无力吐槽，那么这个命令将是你的神器，它会基于当前所在分支新建一个赤裸裸的分支，没有任何的提交历史，但是当前分支的内容一一俱全。新建的分支，严格意义上说，还不是一个分支，因为HEAD指向的引用中没有commit值，只有在进行一次提交后，它才算得上真正的分支。</p><p><code>git checkout &lt;name&gt; 切换分支：</code></p><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>写法：git reset [–hard|soft|mixed|merge|keep] [<commit>或HEAD]<br>功能：命令既可以回退版本，也可以把暂存区的修改回退到工作区<br>原理：将当前的分支重设（reset）到指定的<commit>或者HEAD（默认，如果不显示指定commit，默认是HEAD，即<br>最新的一次提交）<br>–hard：重设（reset） index和working directory，自从<commit>以来在working directory中的任何改变都﻿被丢弃，并把HEAD指向<commit>。<br>–soft：index和working directory中的内容不作任何改变，仅仅把HEAD指向<commit>。这个模式的效果是，执行完毕后，自从<commit>以来的所有改变都会显示在git status的”Changes to be committed”中。<br>–mixed:仅reset index，但是不reset working directory。</p><p>###git  checkout 与git reset区别<br>git checkout是把<code>工作区文件</code>回到最近一次git commit<code>或</code>git add时的状态<br>git reset 是使用<code>仓库区更新工作区和暂存区</code></p><h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><p>??? 储存在当前分支还是针对所有分支都可见<br>切换分支时必须commit your changes or stash them before you switch branches.<br>保存当前工作进度，会把暂存区和工作区的改动保存起来。执行完这个命令后，在运行git status命令，就会发现当前是一个干净的工作区，没有任何改动。使用git stash save ‘message…’可以添加一些注释</p><p>git stash list<br>显示保存进度的列表。也就意味着，git stash命令可以多次执行。</p><p><code>git stash pop</code> [–index] [stash_id]<br>git stash pop 恢复最新的进度到工作区。git默认会把工作区和暂存区的改动都恢复到工作区。<br><code>git stash pop --index</code> 恢复最新的进度到工作区和暂存区。（尝试将原来暂存区的改动还恢复到暂存区）<br>git stash pop stash@{1}恢复指定的进度到工作区。stash_id是通过git stash list命令得到的<br>通过git stash pop命令恢复进度后，会删除当前进度。<br>git stash apply [–index] [stash_id]<br>除了不删除恢复的进度之外，其余和git stash pop 命令一样。</p><p>git stash drop [stash_id]<br>删除一个存储的进度。如果不指定stash_id，则默认删除最新的存储进度。</p><p>git stash clear<br>删除所有存储的进度。</p><h4 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h4><p>git rebase master 待实践</p><h4 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h4><p>简单用法：<br>git cherry-pick <commit id><br>注意：当执行完 cherry-pick 以后，将会生成一个新的提交；这个新的提交的哈希值和原来的不同，但标识名一样；</p><h4 id="git-log-and-git-reflog"><a href="#git-log-and-git-reflog" class="headerlink" title="git log and git reflog"></a>git log and git reflog</h4><p><a href="http://wjp2013.github.io/tool/git-reflog-git-log-git-cherry-pick/" target="_blank" rel="noopener">http://wjp2013.github.io/tool/git-reflog-git-log-git-cherry-pick/</a></p><h4 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h4><p>删除远端分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin -d login-test</span><br></pre></td></tr></table></figure><p>先查看远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -ｒ</span><br></pre></td></tr></table></figure><p>查看所有分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h4 id="git-pull与-rebase"><a href="#git-pull与-rebase" class="headerlink" title="git pull与 rebase"></a>git pull与 rebase</h4><p>今天<br>git pull origin master:master –rebase<br>发生了错误<br>! [rejected] (non-fast-forward)</p><p>一般non-fast-forward 这个错误是发生在push的时候和远程节点不对应，但是今天Git pull 也发生了问题，但是奇怪的是<br>git pull origin master –rebase<br>却可以正常运行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;本地多个-remote-配置（同步推送到线上服务器）&quot;&gt;&lt;a href=&quot;#本地多个-remote-配置（同步推送到线上服务器）&quot; class=&quot;headerlink&quot; title=&quot;本地多个 remote 配置（同步推送到线上服务器）&quot;&gt;&lt;/a&gt;本地多个 rem
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/17/hello-world/"/>
    <id>http://yoursite.com/2019/11/17/hello-world/</id>
    <published>2019-11-17T09:33:09.256Z</published>
    <updated>2019-11-17T09:33:09.256Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
